name: "Certificados: gerar PR a partir de Issue"

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  pull-requests: write

jobs:
  ingest:
    if: contains(join(fromJson(toJson(github.event.issue.labels)).*.name, ','), 'certificado')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extrair campos do Issue
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || "";

            function getAfter(heading) {
              // Pega o bloco imediatamente após "### Heading"
              const re = new RegExp(`###\\s+${heading}[\\s\\S]*?\\n([^#]+)`, "i");
              const m = body.match(re);
              return m ? m[1].trim() : "";
            }

            const title  = getAfter("Título");
            const issuer = getAfter("Emissor");
            const date   = getAfter("Data");
            const url    = getAfter("URL público \\(opcional\\)|URL \\(opcional\\)");

            // link do PDF nos anexos do issue (novo domínio user-attachments)
            const pdfMatch = body.match(/https?:\/\/(?:github\.com\/user-attachments\/files|user-images\.githubusercontent\.com)\/[^\s)]+\.pdf/gi);
            const fileUrl = pdfMatch ? pdfMatch[0] : "";

            if (!title || !issuer || !date || !fileUrl) {
              core.setFailed(`Campos faltando: title=${!!title}, issuer=${!!issuer}, date=${!!date}, fileUrl=${!!fileUrl}`);
            }

            // slug simples
            const slug = title.toLowerCase()
              .normalize('NFD').replace(/[\u0300-\u036f]/g,'')
              .replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'');

            core.setOutput('title', title);
            core.setOutput('issuer', issuer);
            core.setOutput('date', date);
            core.setOutput('url', url || "");
            core.setOutput('fileUrl', fileUrl);
            core.setOutput('slug', slug);

      - name: Preparar pastas
        run: |
          mkdir -p portfolio/public/certificates
          mkdir -p portfolio/content/certificates
          mkdir -p scripts

      - name: Baixar PDF
        env:
          FILE_URL: ${{ steps.parse.outputs.fileUrl }}
          SLUG:     ${{ steps.parse.outputs.slug }}
        run: |
          curl -L "$FILE_URL" -o "portfolio/public/certificates/${SLUG}.pdf"

      - name: Criar metadados (Markdown)
        env:
          TITLE: ${{ steps.parse.outputs.title }}
          ISSUER: ${{ steps.parse.outputs.issuer }}
          DATE: ${{ steps.parse.outputs.date }}
          URL: ${{ steps.parse.outputs.url }}
          SLUG: ${{ steps.parse.outputs.slug }}
        run: |
          cat > "portfolio/content/certificates/${SLUG}.md" <<'EOF'
          ---
          title: "${TITLE}"
          issuer: "${ISSUER}"
          date: "${DATE}"
          file: "/certificates/${SLUG}.pdf"
          url: "${URL}"
          ---
          EOF

      - name: Gerar índice JSON
        run: node scripts/build-cert-index.mjs

      - name: Abrir Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "cert: add ${{ steps.parse.outputs.slug }}"
          title: "Adicionar certificado: ${{ steps.parse.outputs.title }}"
          body: "Gerado automaticamente a partir do Issue #${{ github.event.issue.number }}."
          branch: "cert/${{ steps.parse.outputs.slug }}"
          base: "main"
